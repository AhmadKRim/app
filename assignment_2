{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyO/28j3BOpSma6SOC1bR87C",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/AhmadKRim/app/blob/master/assignment_2\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "YIqOVxHsmrt6"
      },
      "outputs": [],
      "source": [
        "# import necessary libraries\n",
        "import pandas as pd\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "from numpy import mean\n",
        "from numpy import std\n",
        "from numpy import absolute\n",
        "from pandas import read_csv\n",
        "from sklearn.model_selection import cross_val_score\n",
        "from sklearn.model_selection import KFold\n",
        "from sklearn.compose import ColumnTransformer\n",
        "from sklearn.pipeline import Pipeline\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.preprocessing import OneHotEncoder\n",
        "from sklearn.preprocessing import MinMaxScaler\n",
        "from sklearn.model_selection import GridSearchCV\n",
        "from sklearn.metrics import roc_curve\n",
        "from sklearn.metrics import roc_auc_score"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df = pd.read_csv('//content/bank-full.csv',sep=';')"
      ],
      "metadata": {
        "id": "VEQfEqhbnTt6"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# store all rows and columns apart from last column(label) in X\n",
        "X = df.iloc[:,:(df.shape[1]-1)]\n",
        "y = df['y']"
      ],
      "metadata": {
        "id": "0n2zJ7SXnk7k"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# split the data into train and test\n",
        "X_train, X_test, y_train, y_test = train_test_split(X,y, test_size=.20,random_state=15)\n",
        "# lets check the shapes of train/test sets\n",
        "print(X_train.shape, X_test.shape)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "NS0HbsMFnn7H",
        "outputId": "cdc5573f-07e8-40e2-ad22-836eb57024c3"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "(36168, 16) (9043, 16)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "• Here, we can check the types of variables available in our dataset. This should give you a\n",
        "list of categorical variables as well as the numerical variables"
      ],
      "metadata": {
        "id": "_trzW2u5on-O"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Numerical and categorical values\n",
        "num_vars = X_train.select_dtypes(include=['int64', 'float64']).columns\n",
        "cat_vars = X_train.select_dtypes(include=['object', 'bool']).columns\n",
        "print('Numerical Vars are ',num_vars)\n",
        "print('Categorical vars are ',cat_vars)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "xcoDzP1uoZ9M",
        "outputId": "fa8f409e-ffee-4cf7-e084-0dc80323eb3a"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Numerical Vars are  Index(['age', 'balance', 'day', 'duration', 'campaign', 'pdays', 'previous'], dtype='object')\n",
            "Categorical vars are  Index(['job', 'marital', 'education', 'default', 'housing', 'loan', 'contact',\n",
            "       'month', 'poutcome'],\n",
            "      dtype='object')\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "• Recall, that we need to scale the features in our dataset, as well as encode all the categorical\n",
        "variables. We will use OneHotEncoder for the categorical variables and MinMaxScaler for the\n",
        "numerical variables\n"
      ],
      "metadata": {
        "id": "BXddaLk-o6BR"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# data pre-processing: OneHotEncoder (for categorical variables)\n",
        "# MinMax Scaler for numerical variables\n",
        "pre_process = [('cat', OneHotEncoder(), cat_vars), ('num', MinMaxScaler(),num_vars)]\n",
        "# use ColumnTransformer to apply the above pre-processing to the desired columns\n",
        "cols_transform = ColumnTransformer(transformers=pre_process)"
      ],
      "metadata": {
        "id": "uf9_uE5Yo8Cb"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "• Lets create our RandomForestClassifier\n"
      ],
      "metadata": {
        "id": "AF-3Z7dJpOHW"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.ensemble import RandomForestClassifier\n",
        "model = RandomForestClassifier(random_state=15,\n",
        "n_estimators=500,\n",
        "max_features='sqrt',)\n"
      ],
      "metadata": {
        "id": "BlKT8TDzpP7c"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "• Lets create our pipeline, use 10-fold cross validation and grid search to search for the best\n",
        "parameters in for Random Forest Classifier"
      ],
      "metadata": {
        "id": "Hpi_Pnm9peFP"
      }
    },
    {
      "cell_type": "code",
      "source": [
        " # add pre-processing, model in one pipeline\n",
        "\n",
        "rf_pipeline = Pipeline(steps=[('prep',cols_transform), ('m', model)])\n"
      ],
      "metadata": {
        "id": "TnnvVID0pffr"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# encode the class labels\n",
        "y_train.replace('no',0,inplace=True)\n",
        "y_train.replace('yes',1,inplace=True)\n",
        "y_test.replace('no',0,inplace=True)\n",
        "y_test.replace('yes',1,inplace=True)\n"
      ],
      "metadata": {
        "id": "bF29HLParNQX"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "• Train the model on the training set"
      ],
      "metadata": {
        "id": "qfrRzQmWMZT3"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# train the model\n",
        "rf_train = rf_pipeline.fit(X_train,y_train)"
      ],
      "metadata": {
        "id": "pugoroutMaYR"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "• Test using the testing set X_test"
      ],
      "metadata": {
        "id": "6wS8wC9wMoZt"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "predictions = rf_pipeline.predict(X_test)\n",
        "np.mean(predictions==y_test)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "02ZpdtmLMrwf",
        "outputId": "c53cc37a-28f9-407a-ce64-3596ca973b9a"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.9044564856795311"
            ]
          },
          "metadata": {},
          "execution_count": 39
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "probs = rf_pipeline.predict_proba(X_test)\n",
        "# probs of positive classes only\n",
        "probs = probs[:, 1]\n",
        "# compute auc score\n",
        "auc = roc_auc_score(y_test, probs)\n",
        "print('AUC: %.2f' % auc)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "fEv_WZn3M1Sq",
        "outputId": "756f4e86-473b-440a-85f3-c2ba12aa9554"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "AUC: 0.93\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "type(rf_pipeline)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "TV44wuEyM8GS",
        "outputId": "d6a8cc9e-95cb-4d5c-e383-4c947c75bc9e"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "sklearn.pipeline.Pipeline"
            ]
          },
          "metadata": {},
          "execution_count": 41
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# create a small function to plot the roc curve (same as code above)\n",
        "def plot_roc_curve(fpr, tpr):\n",
        "    plt.plot(fpr, tpr, color='blue', label='ROC')\n",
        "    plt.plot([0, 1], [0, 1], color='red', linestyle='--')\n",
        "    plt.xlabel('False Positive Rate')\n",
        "    plt.ylabel('True Positive Rate')\n",
        "\n",
        "    plt.title('ROC Curve')\n",
        "    plt.legend()\n",
        "    plt.show()"
      ],
      "metadata": {
        "id": "m485yZKkNDU_"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        " # Plot the roc curve\n",
        "fpr, tpr, thresholds = roc_curve(y_test, probs)\n",
        "plot_roc_curve(fpr, tpr)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 295
        },
        "id": "_QpYjO7QNy1b",
        "outputId": "9e919bd8-cc30-4bb9-85d4-626dc30f7c29"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    }
  ]
}